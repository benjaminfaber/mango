#!/usr/bin/env python3

# This script uses the database of algorithms in "algorithms.dat" to populate
# several sections of mango.hpp, ensuring they are consistent.

print(__file__ + ": Using the database of algorithms to generate code in mango.hpp")

# Read in the database of algorithms:
database_filename = "algorithms.dat"
try:
    f = open(database_filename)
except:
    print("Error! Unable to open "+database_filename)
    raise

lines = f.readlines()
f.close()

def TF_to_truefalse(str):
    str = str.strip().upper()
    if str == "T":
        return "true"
    elif str == "F":
        return "false"
    else:
        print("Error! TF_to_truefalse called with argument "+str+", which is neither T nor F")
        exit(1)

# Filter out any commented rows or rows that are blank
database = []
for line in lines:
    stripline = line.strip().lower()
    if len(stripline) < 2:
        continue
    if stripline[0] == '!' or stripline[0] == '#' or stripline[0] == '%':
        continue
    splitline = stripline.split(',')
    if len(splitline) != 6:
        print('Error! The following line of '+database_filename+' has the wrong number of entries:')
        print(line)
        exit(1)
    for j in [2,3,4,5]:
        splitline[j] = TF_to_truefalse(splitline[j])
    # If the algorithm uses derivatives, ensure 'parallel' is true:
    if splitline[3] == 'true':
        splitline[4] = 'true'
    database.append([s.strip() for s in splitline])
#print(database)

# Form the algorithm names:
names = []
for entry in database:
    if len(entry[1]) > 0:
        str = entry[0]+'_'+entry[1]
    else:
        str = entry[0]
    names.append(str)

# Form the set of packages:
packages = list(set([entry[0] for entry in database]))
packages_for_least_squares = []
packages_for_non_least_squares = []
for package in packages:
    has_least_squares_algorithm = False
    has_non_least_squares_algorithm = False
    for entry in database:
        if entry[0]==package and entry[2]=='true':
            has_least_squares_algorithm = True
        if entry[0]==package and entry[2]=='false':
            has_non_least_squares_algorithm = True
    packages_for_least_squares.append(has_least_squares_algorithm)
    packages_for_non_least_squares.append(has_non_least_squares_algorithm)
print('Packages: ',packages)
print('Has least-squares algorithm? ',packages_for_least_squares)
print('Has non-least-squares algorithm? ',packages_for_non_least_squares)

def find_markup_single(lines,str):
    found_it = 0
    for j in range(len(lines)):
        stripline = lines[j].strip()
        if stripline[:2] == '//' and stripline[2:].strip() == '<'+str+'>':
            found_it += 1
            line = j
    if found_it == 0:
        print("Error! Unable to find a line '// <"+str+">'")
        exit(1)
    if found_it > 1:
        print("Error! Found more than 1 line '// <"+str+">'")
        exit(2)
    return line

def find_markup(lines,str):
    start = find_markup_single(lines,str)
    end   = find_markup_single(lines,'/'+str)
    return start,end

##################################################################
# Editing mango.hpp
##################################################################

# Read in the file to preprocess
filename = 'mango.hpp'
try:
    f = open(filename)
except:
    print("Error! Unable to open "+filename+" for reading")
    raise

lines = f.readlines()
f.close()

# Replace <enum> .. </enum>
comment_line = ['    // This section was automatically generated by '+__file__+'\n']
start, end = find_markup(lines,'enum')
newlines = lines[:start+1] + comment_line
for name in names:
    str1 = '    '+name+',\n'
    newlines.append(str1.upper())
lines = newlines + lines[end:]

# Replace <database> .. </database>
start, end = find_markup(lines,'database')
newlines = lines[:start+1] + comment_line
newlines += ['    //                             name,         package, least_squares, uses_derivatives, parallel, requires_bound_constraints\n']
for j in range(len(database)):
    entry = database[j]
    name = ('"'+names[j]+'",').lower()
    package = 'PACKAGE_'+entry[0].upper()+','
    str = '    {' + name.rjust(35) + package.rjust(17) + entry[2].rjust(14) + ',' + entry[3].rjust(17) + ',' + entry[4].rjust(9) + ',' + entry[5].rjust(20) + '}'
    if j != len(database)-1:
        str += ','
    newlines.append(str+'\n')
lines = newlines + lines[end:]

# Replace <packages> .. </packages>
start, end = find_markup(lines,'packages')
newlines = lines[:start+1] + comment_line
for package in packages:
    newlines.append('    PACKAGE_'+package.upper()+',\n')
lines = newlines + lines[end:]

# Replace <optimize_packages> .. </optimize_packages>
start, end = find_markup(lines,'optimize_packages')
newlines = lines[:start+1] + comment_line
for j in range(len(packages)):
    if packages_for_non_least_squares[j]:
        newlines.append('    void optimize_'+packages[j]+'();\n')
    if packages_for_least_squares[j]:
        newlines.append('    void optimize_least_squares_'+packages[j]+'();\n')
lines = newlines + lines[end:]

# Write new file
#filename = 'mango_new.hpp'
try:
    f = open(filename,'w')
except:
    print("Error! Unable to open "+filename+" for writing")
    raise
f.writelines(lines)
f.close()

##################################################################
# Editing optimize.cpp
##################################################################

# Read in the file to preprocess
filename = 'optimize.cpp'
try:
    f = open(filename)
except:
    print("Error! Unable to open "+filename+" for reading")
    raise

lines = f.readlines()
f.close()

# Replace <optimize_packages> .. </optimize_packages>
start, end = find_markup(lines,'optimize_packages')
newlines = lines[:start+1] + comment_line
for j in range(len(packages)):
    if packages_for_non_least_squares[j]:
        newlines.append('  case PACKAGE_'+packages[j].upper()+':\n')
        newlines.append('    optimize_'+packages[j]+'();\n')
        newlines.append('    break;\n')
lines = newlines + lines[end:]

# Write new file
#filename = 'mango_new.hpp'
try:
    f = open(filename,'w')
except:
    print("Error! Unable to open "+filename+" for writing")
    raise
f.writelines(lines)
f.close()

##################################################################
# Editing optimize_least_squares.cpp
##################################################################

# Read in the file to preprocess
filename = 'optimize_least_squares.cpp'
try:
    f = open(filename)
except:
    print("Error! Unable to open "+filename+" for reading")
    raise

lines = f.readlines()
f.close()

# Replace <least_squares_packages> .. </least_squares_packages>
start, end = find_markup(lines,'least_squares_packages')
newlines = lines[:start+1] + comment_line
for j in range(len(packages)):
    if packages_for_least_squares[j]:
        newlines.append('    case PACKAGE_'+packages[j].upper()+':\n')
        newlines.append('      optimize_least_squares_'+packages[j]+'();\n')
        newlines.append('      break;\n')
lines = newlines + lines[end:]

# Replace <non_least_squares_packages> .. </non_least_squares_packages>
start, end = find_markup(lines,'non_least_squares_packages')
newlines = lines[:start+1] + comment_line
for j in range(len(packages)):
    if packages_for_non_least_squares[j]:
        newlines.append('    case PACKAGE_'+packages[j].upper()+':\n')
        newlines.append('      optimize_'+packages[j]+'();\n')
        newlines.append('      break;\n')
lines = newlines + lines[end:]

# Write new file
try:
    f = open(filename,'w')
except:
    print("Error! Unable to open "+filename+" for writing")
    raise
f.writelines(lines)
f.close()

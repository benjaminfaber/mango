#!/usr/bin/env python3

myfigsize=(14,7)

import os
print()
print("usage: " + os.path.basename(__file__) + " <1 or more mango_out.* files>")
print("Wildcards are accepted in the filenames.")

import matplotlib.pyplot as plt
import numpy as np
import sys
import glob

if len(sys.argv) < 2:
    print("Error! You must specify at least 1 argument: the mango_out file.")
    exit(1)

files_function_evaluations = []
files_objective_function = []
filenames = []

for k in range(1,len(sys.argv)):
    candidate_files = glob.glob(sys.argv[k])
    if len(candidate_files) < 1:
        print("WARNING: No files were found matching the argument "+sys.argv[k])
    for j in range(len(candidate_files)):
        filename = candidate_files[j]
        if os.path.isfile(filename):
            filenames.append(filename)
            if filename[:10] != "mango_out.":
                print("WARNING: Including file "+filename+" even though it does not begin with mango_out.")

print()
print("Files that will be read and plotted:")
for file in filenames:
    print("  "+file)
print()

for k in range(len(filenames)):
    filename = filenames[k]
    f = open(filename,'r')
    lines = f.readlines()
    f.close()

    temp = lines[3].split(',')
    try:
        N_parameters = int(temp[0])
    except:
        print("ERROR! Unable to read N_parameters from line 3 of "+filename)
        print("This probably means this file is not a correctly formatted mango_out file.")
        raise

    function_evaluations = []
    objective_function = []
    for j in range(5,len(lines)):
        temp = lines[j].split(',')
        try:
            function_evaluations.append(int(temp[0]))
        except:
            print("ERROR! Unable to convert "+temp[0]+" to int on line "+str(j)+" of file "+filename)
            print("This probably means this file is not a correctly formatted mango_out file.")
            raise

        try:
            this_objective_function = float(temp[N_parameters+1])
        except:
            print("Warning: unable to convert "+temp[N_parameters+1]+" to float in file "+filename)
            this_objective_function = np.nan
        objective_function.append(this_objective_function)

    files_function_evaluations.append(function_evaluations)
    files_objective_function.append(objective_function)

N_files = len(files_function_evaluations)

#########################################################
# Done reading files. Now make the plot.
#########################################################

fig = plt.figure(figsize=myfigsize)
fig.patch.set_facecolor('white')

numCols = 1
numRows = 2
plotNum = 1

import os

plt.subplot(numRows,numCols,plotNum)
plotNum += 1
for j in range(N_files):
    plt.plot(files_function_evaluations[j], files_objective_function[j], '.-', label = filenames[j])
plt.xlabel('Function evaluation')
plt.ylabel('Objective function')
plt.grid(True)
if N_files > 1:
    plt.legend(loc=0,fontsize=7)

plt.subplot(numRows,numCols,plotNum)
plotNum += 1
for j in range(N_files):
    plt.semilogy(files_function_evaluations[j], files_objective_function[j], '.-', label = filenames[j])
plt.xlabel('Function evaluation')
plt.ylabel('Objective function')
plt.grid(True)
if N_files > 1:
    plt.legend(loc=0,fontsize=7)

if N_files == 1:
    plt.figtext(0.5,0.995, os.path.abspath(filename), ha='center',va='top',fontsize=7)

plt.tight_layout()

##############################################################

plt.show()

